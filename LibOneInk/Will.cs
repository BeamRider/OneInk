// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: will.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WacomInkFormat {

  /// <summary>Holder for reflection information generated from will.proto</summary>
  public static partial class WillReflection {

    #region Descriptor
    /// <summary>File descriptor for will.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WillReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp3aWxsLnByb3RvEg5XYWNvbUlua0Zvcm1hdCKeAQoEUGF0aBIZCg5zdGFy",
            "dFBhcmFtZXRlchgBIAEoAjoBMBIXCgxlbmRQYXJhbWV0ZXIYAiABKAI6ATES",
            "GwoQZGVjaW1hbFByZWNpc2lvbhgDIAEoDToBMhISCgZwb2ludHMYBCADKBFC",
            "AhABEhgKDHN0cm9rZVdpZHRocxgFIAMoEUICEAESFwoLc3Ryb2tlQ29sb3IY",
            "BiADKBFCAhABQgJIAw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WacomInkFormat.Path), global::WacomInkFormat.Path.Parser, new[]{ "StartParameter", "EndParameter", "DecimalPrecision", "Points", "StrokeWidths", "StrokeColor" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WacomInkFormat.WillReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      _hasBits0 = other._hasBits0;
      startParameter_ = other.startParameter_;
      endParameter_ = other.endParameter_;
      decimalPrecision_ = other.decimalPrecision_;
      points_ = other.points_.Clone();
      strokeWidths_ = other.strokeWidths_.Clone();
      strokeColor_ = other.strokeColor_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "startParameter" field.</summary>
    public const int StartParameterFieldNumber = 1;
    private readonly static float StartParameterDefaultValue = 0F;

    private float startParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartParameter {
      get { if ((_hasBits0 & 1) != 0) { return startParameter_; } else { return StartParameterDefaultValue; } }
      set {
        _hasBits0 |= 1;
        startParameter_ = value;
      }
    }
    /// <summary>Gets whether the "startParameter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStartParameter {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "startParameter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStartParameter() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "endParameter" field.</summary>
    public const int EndParameterFieldNumber = 2;
    private readonly static float EndParameterDefaultValue = 1F;

    private float endParameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndParameter {
      get { if ((_hasBits0 & 2) != 0) { return endParameter_; } else { return EndParameterDefaultValue; } }
      set {
        _hasBits0 |= 2;
        endParameter_ = value;
      }
    }
    /// <summary>Gets whether the "endParameter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEndParameter {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "endParameter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEndParameter() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "decimalPrecision" field.</summary>
    public const int DecimalPrecisionFieldNumber = 3;
    private readonly static uint DecimalPrecisionDefaultValue = 2;

    private uint decimalPrecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DecimalPrecision {
      get { if ((_hasBits0 & 4) != 0) { return decimalPrecision_; } else { return DecimalPrecisionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        decimalPrecision_ = value;
      }
    }
    /// <summary>Gets whether the "decimalPrecision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDecimalPrecision {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "decimalPrecision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDecimalPrecision() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_points_codec
        = pb::FieldCodec.ForSInt32(34);
    private readonly pbc::RepeatedField<int> points_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "strokeWidths" field.</summary>
    public const int StrokeWidthsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_strokeWidths_codec
        = pb::FieldCodec.ForSInt32(42);
    private readonly pbc::RepeatedField<int> strokeWidths_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StrokeWidths {
      get { return strokeWidths_; }
    }

    /// <summary>Field number for the "strokeColor" field.</summary>
    public const int StrokeColorFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_strokeColor_codec
        = pb::FieldCodec.ForSInt32(50);
    private readonly pbc::RepeatedField<int> strokeColor_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StrokeColor {
      get { return strokeColor_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartParameter, other.StartParameter)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndParameter, other.EndParameter)) return false;
      if (DecimalPrecision != other.DecimalPrecision) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!strokeWidths_.Equals(other.strokeWidths_)) return false;
      if(!strokeColor_.Equals(other.strokeColor_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStartParameter) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartParameter);
      if (HasEndParameter) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndParameter);
      if (HasDecimalPrecision) hash ^= DecimalPrecision.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= strokeWidths_.GetHashCode();
      hash ^= strokeColor_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasStartParameter) {
        output.WriteRawTag(13);
        output.WriteFloat(StartParameter);
      }
      if (HasEndParameter) {
        output.WriteRawTag(21);
        output.WriteFloat(EndParameter);
      }
      if (HasDecimalPrecision) {
        output.WriteRawTag(24);
        output.WriteUInt32(DecimalPrecision);
      }
      points_.WriteTo(output, _repeated_points_codec);
      strokeWidths_.WriteTo(output, _repeated_strokeWidths_codec);
      strokeColor_.WriteTo(output, _repeated_strokeColor_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasStartParameter) {
        size += 1 + 4;
      }
      if (HasEndParameter) {
        size += 1 + 4;
      }
      if (HasDecimalPrecision) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DecimalPrecision);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += strokeWidths_.CalculateSize(_repeated_strokeWidths_codec);
      size += strokeColor_.CalculateSize(_repeated_strokeColor_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      if (other.HasStartParameter) {
        StartParameter = other.StartParameter;
      }
      if (other.HasEndParameter) {
        EndParameter = other.EndParameter;
      }
      if (other.HasDecimalPrecision) {
        DecimalPrecision = other.DecimalPrecision;
      }
      points_.Add(other.points_);
      strokeWidths_.Add(other.strokeWidths_);
      strokeColor_.Add(other.strokeColor_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StartParameter = input.ReadFloat();
            break;
          }
          case 21: {
            EndParameter = input.ReadFloat();
            break;
          }
          case 24: {
            DecimalPrecision = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 42:
          case 40: {
            strokeWidths_.AddEntriesFrom(input, _repeated_strokeWidths_codec);
            break;
          }
          case 50:
          case 48: {
            strokeColor_.AddEntriesFrom(input, _repeated_strokeColor_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
